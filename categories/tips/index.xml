<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tips on VPhong Blog | A coding life</title><link>https://blog.vphong.com/categories/tips/</link><description>Recent content in tips on VPhong Blog | A coding life</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 19 Mar 2023 04:28:36 +0000</lastBuildDate><atom:link href="https://blog.vphong.com/categories/tips/index.xml" rel="self" type="application/rss+xml"/><item><title>Git Tips - Reset local files to a remote branch | Git in-use</title><link>https://blog.vphong.com/series/git-in-use/git-tips---reset-local-files-to-current-status-on-remote-branch--git-in-use/</link><pubDate>Sun, 19 Mar 2023 04:28:36 +0000</pubDate><guid>https://blog.vphong.com/series/git-in-use/git-tips---reset-local-files-to-current-status-on-remote-branch--git-in-use/</guid><description>TL;DR:
1git checkout &amp;lt;remote&amp;gt;/&amp;lt;branch_name&amp;gt; -- &amp;lt;file_path_1&amp;gt; &amp;lt;file_path_2&amp;gt; ... For example:
1git checkout origin/develop -- src/components/Banner.tsx 2git checkout upstream/master -- src/components/Header.tsx src/utils/utils.ts The ScenariosSeveral most common use cases for this command:
You raised a pull request and reviewer said that several specific files should not be there. You made a mistake that committed several files into a commit on your local development environment. You realized something wrong, or you wanted to re-code a specific file that already committed or pushed.</description></item><item><title>Git Tips - Using multiple SSH keys with Git | Git in-use</title><link>https://blog.vphong.com/series/git-in-use/git-tips---using-multiple-ssh-keys-with-git--git-in-use/</link><pubDate>Sat, 18 Feb 2023 10:26:44 +0000</pubDate><guid>https://blog.vphong.com/series/git-in-use/git-tips---using-multiple-ssh-keys-with-git--git-in-use/</guid><description>Using Multiple SSH Keys for GitWhen you work with Git, you might need to use different SSH keys for different repositories. For example, you might have personal and work Git accounts, each with their own SSH keys. In this case, you need to tell Git which key to use for which repository.
One way to do this is to use SSH configuration files. These files allow you to specify the SSH key and other options to use when connecting to a specific host.</description></item><item><title>Git Tips - Reset a branch to remote status | Git in-use</title><link>https://blog.vphong.com/series/git-in-use/2023-02-04-git-tips---reset-a-branch-to-remote-status--git-in-use/</link><pubDate>Sat, 04 Feb 2023 14:57:27 +0000</pubDate><guid>https://blog.vphong.com/series/git-in-use/2023-02-04-git-tips---reset-a-branch-to-remote-status--git-in-use/</guid><description>TL;DR: Simply use
1git reset --hard origin/branch_name Resetting a branch to a corresponding remote branch in Git can be useful if you want to start fresh or discard complicated changes with the latest changes from the remote repository.
Here are the steps that might help you:
Fetch latest updatesFirstly, you need to ensure you have the latest changes from the remote repository. You can do this by using the following command:</description></item><item><title>Git Tips - Discard local changes | Git in-use</title><link>https://blog.vphong.com/series/git-in-use/2023-01-26-git-tips---discard-local-unstaged-changes--git-in-use/</link><pubDate>Thu, 26 Jan 2023 05:14:45 +0000</pubDate><guid>https://blog.vphong.com/series/git-in-use/2023-01-26-git-tips---discard-local-unstaged-changes--git-in-use/</guid><description>TL;DR: Reset to the last commit state. My favorite commands (just about it easy to type)
1git checkout . 2 3git reset --hard HEAD Sometimes, in developer life, there are some cases that you might want to revert back all changes made to your feature branch.
For example:
You are coding on a feature/bug fixing, but then realizing that you went for the wrong way and wanted to start it again in the brand new code.</description></item></channel></rss>